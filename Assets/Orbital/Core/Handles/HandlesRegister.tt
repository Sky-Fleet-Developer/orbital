<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="System" #>
<#
    List<string> registeredTypes = new List<string>
    {
        "IUpdateHandler",
        "IFixedUpdateHandler",
        "ILateUpdateHandler",
        "IUpdateByFrequencyHandler",
        "ISimulationSpaceTriggerHandler",
    };
#>
using Zenject;

namespace Orbital.Core.Handles
{
    public static class HandlesRegister
    {
        public static void RegisterHandlers<T>(T target, DiContainer container)
        {<#foreach (string type in registeredTypes){#> 
            if(target is <#= type #> <#= type.ToLower() #>)
            {
                HandlerCollection.GetOrCreateCollection<<#= type #>>(container).AddItem(<#= type.ToLower() #>);
            }
<#}#>        }
        public static void UnregisterHandlers<T>(T target, DiContainer container)
        {<#foreach (string type in registeredTypes){#> 
            if(target is <#= type #> <#= type.ToLower() #>)
            {
                HandlerCollection.GetOrCreateCollection<<#= type #>>(container).RemoveItem(<#= type.ToLower() #>);
            }
<#}#>        }
    }
}